---
title: "Manejo de variables"
format: html
editor: visual
---

## Instalar paquetes

```{r}
# install.packages("tidyverse")
# install.packages("rio")
# install.packages("here")
# install.packages("janitor")
# install.packages("skimr")
# install.packages("visdat")
```

## Cargar paquetes

```{r}
library(tidyverse)
library(rio)
library(here)
library(janitor)
```

## Importando s02_treat_artritis.csv usando el paquete rio

```{r}
data_artritis = import(here("data", "s03_treat_artritis.csv"))
```

## Vistazo al contenido

### ¿Cuántas variables y observaciones hay?

El primer número indica el número de filas, el segundo, el número de columnas.

```{r}
dim(data_artritis)
```

### ¿Cuantas y qué tipos de variables hay?

```{r}
str(data_artritis)
```

Una función similar

```{r}
dplyr::glimpse(data_artritis)
```

Estadísticos descriptivos y otros parámetros para exploración de datos

```{r}
skimr::skim(data_artritis)
```

Resumen por variable

```{r}
summary(data_artritis)
```

### Visualmente

```{r}
#View(data_artritis)
```

```{r}
#visdat::vis_dat(data_artritis)
```

```{r}
#DataExplorer::create_report(data_artritis)
```

# Limpieza de datos

## Paso uno: corregir los nombres de variables.

Clean names es una función del paquete janitor

```{r}
data_artritis_1 = clean_names(data_artritis)
```

Nota el constraste (la función `names()` imprime los nombres de columnas de un *dataset*)

```{r}
names(data_artritis)
```

```{r}
names(data_artritis_1)
```

## Paso dos: convertir celdas vacías a NA

```{r}
data_artritis_2 = mutate_if(data_artritis_1, is.character, list(~na_if(.,"")))
```

## Paso tres: eliminar columnas o filas vacias.

```{r}
data_artritis_3 = remove_empty(data_artritis_2, which = c("rows", "cols"))
```

## Optimizando el código

### Corregir nombres, celdas vacías a NA y eliminar columnas o filas vacías.

```{r}
data_artritis_1 = data_artritis |> 
  clean_names() |> 
  mutate_if(is.character, list(~ na_if(., ""))) |> 
  remove_empty(which = c("rows", "cols"))
```

## Paso 4: corregir errores ortográficos o valores inválidos

### Inspección tabular

```{r}
data_artritis_1 |> count(categorias_de_edad) # Cambia de variable categórica
```

Transformando de data.frame a as tibble

```{r}
data_artritis_2 = as_tibble(data_artritis_1)
```

Corregir errores ortográficos usando `mutate()` y `case_when()`

```{r}
data_artritis_3 = data_artritis_2 |> 
  mutate(sexo = case_when(
    sexo == "f" ~ "Femenino", 
    sexo == "Maculino" ~ "Masculino", 
    sexo == "Masculin" ~ "Masculino",
    sexo == "masculino" ~ "Masculino",
    TRUE ~ sexo))
```

```{r}
data_artritis_3 = data_artritis_2 |> 
  mutate(sexo = case_when(
    sexo == "f" ~ "Femenino",
    sexo %in% c("Maculino", "Masculin", "masculino") ~ "Masculino",
    TRUE ~ sexo)
    )
```

## Paso 5: Colapsar una variable categórica en menos niveles

Un vistazo a la variable de interés

```{r}
data_artritis_3 |> count(categorias_de_edad)
```

Colapsar a dos categorías

```{r}
data_artritis_4 = data_artritis_3 |> 
  mutate(categorias_de_edad_2 = case_when(
    categorias_de_edad %in% c("42-49 años", "50-59 años") ~ "42-59",
    categorias_de_edad %in% c("60-69 años", "70+ años") ~ "> 60",
    TRUE ~ categorias_de_edad)
    )
```

Comprobando el cambio

```{r}
data_artritis_4 |> count(categorias_de_edad_2)
```

## Paso 6: Transformar una variable

Transformación a logaritmo

```{r}
summary(data_artritis_4$timepo_desde_diagnostico_a)
```

```{r}
hist(data_artritis_4$timepo_desde_diagnostico_a)
```

```{r}
data_artritis_5 <- data_artritis_4 |>  
  mutate(log_años_desde_dx = (log(timepo_desde_diagnostico_a + 1)))

```

```{r}
data_artritis_5 |>  
  ggplot(aes(x = log_años_desde_dx)) +
  geom_histogram(bins = 10) +
  labs(y = "Frecuencia", x = "log(años desde el diagnóstico + 1)")
```

Transformación a binario

```{r}
data_artritis_6 = data_artritis_5 |>
  mutate(
    tiempo_desde_dx_c = case_when(
      timepo_desde_diagnostico_a <  10 ~ "< 10",
      timepo_desde_diagnostico_a >= 10 ~ ">= 10"
    )
  ) |>
  mutate(tiempo_desde_dx_c = factor(tiempo_desde_dx_c, levels = "< 10", ">= 10"))
```

Transformando valores a valores perdidos usando la función `na_if()`

```{r}
data_artritis_7 = data_artritis_6 |> 
  mutate(timepo_desde_diagnostico_a = na_if(timepo_desde_diagnostico_a, -7))
```

Transformando valores a valores perdidos usando la función `case_when()`

```{r}
data_artritis_7 = data_artritis_6 |> 
  mutate(edad_a = case_when(edad_a %in% c(3, 999) ~ NA,
                            TRUE ~ edad_a))
```

## Paso 7: Renombrar una variable

Imprimir los nombres. ¿Cuáles necesitann cambio?

```{r}
names(data_artritis_7)
```

Cambiando un nombre de variables

```{r}
data_artritis_8 <- data_artritis_7 |>  
  rename(tiempo_desde_dx = timepo_desde_diagnostico_a)
```

Varios a la vez

```{r}
data_artritis_8 <- data_artritis_7 |>  
  rename(tiempo_desde_dx = timepo_desde_diagnostico_a,
         indice_de_activ_enf_clin = valor_cdai)
```

Comprobando

```{r}
names(data_artritis_8)
```
