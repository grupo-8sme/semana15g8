---
title: "Estadística descriptiva: resumen de datos"
author: "Kevin J. Paez"
format: html
editor: visual
---

# Paquetes para resumir datos

Instalar paquetes

```{r}
#install.packages("gtsummary")
#install.packages("finalfit")
#install.packages("flextable")
```

Cargar paquetes

```{r}
library(tidyverse)
library(here)
library(rio)
library(gtsummary) ## Para la "Tabla 1"
library(finalfit)
library(flextable)
```

# Cargando los datos

```{r}
data_diabetes <- import(here("data", "s04_diabetes.csv"))
```

## Recuerda

Antes de iniciar el análisis descriptivo de tus datos, estos deben ser inspeccionados para la eliminación de errores en la codificación o transformación de valores perdidos o anómalos.

La transformación de variable (por ejemplo, para obtener una distribución similar a la normal) puede ocurrir en etapas avanzadas del análisis.

### La "estructura" de los datos

```{r}
str(data_diabetes)
```

# 1. Resumen de variables categóricas

Para resumir variables categóricas usamos frecuencias simples y frecuencias porcentuales. Es importante resumir, también, los datos perdidos. Resumen con la función `table()` para la variable `Diabetes`.

```{r}
table(data_diabetes$Diabetes, useNA = "ifany")
```

```{r}
table(data_diabetes$insulina_cat, useNA = "ifany")
```

Con tidyverse

```{r}
data_diabetes |> 
  dplyr::count(insulina_cat, sort = TRUE)
```

Valores perdidos en proporciones

```{r}
prop.table(table(data_diabetes$insulina_cat, useNA = "ifany"))
```

# 2. Resumen de variables continuas

Para resumir variables numéricas hay funciones en la base de R que permiten calcular los principales estadísticos. Por ejemplo, la función `mean()` y `sd()`, calcula el promedio y desviación estandard de un conjunto de datos.

```{r}
mean(data_diabetes$imc, na.rm = TRUE)
```

```{r}
sd(data_diabetes$imc, na.rm = TRUE)
```

Ojo, en este ejemplo sólo será posible calcular el promedio y desviación estandard si el valor para el argumento na.rm es TRUE. Esto elimina los valores perdidos en el cálculo.

Otras funciones que puedes encontrar útil son `min()`, `max()`, `median()` y `IQR()`

```{r}
min(data_diabetes$imc, na.rm = TRUE) # Proporciona el valor mínimo

IQR(data_diabetes$imc, na.rm = TRUE) # Calcula el rango intercuartilico

median(data_diabetes$imc, na.rm = TRUE) # Calcula la mediana
```

### La función `summary()` para calcular todas las medidas, a la vez.

`summary()` es una función nativa de R que permite calcular todas las medidas estadísticas a la vez. Abajo, un ejemplo con la variable Glucosa

```{r}
summary(data_diabetes$Glucosa)
```

## ¿Mediana o media?

Una de las cosas que queremos saber al realizar un análisis descriptivo es la distribución de los datos. La media y mediana puede informarnos al respecto. Abajo, un ejemplo para la variable `imc`

```{r}
mean(data_diabetes$imc, na.rm = T)
```

```{r}
median(data_diabetes$imc, na.rm = T)
```

La media y mediana de la variable `imc` son similares. Estos sugiere que los datos tienen una distribución simétrica.

Debajo otro ejemplo con la variable `insulina`

```{r}
mean(data_diabetes$insulina, na.rm = T)
```

```{r}
median(data_diabetes$insulina, na.rm = T)
```

La media y mediana de la variable `insulina` son diferentes. Estos sugiere que los datos tienen una distribución asimétrica.

Comprobémoslo visualmente

```{r}
par(mfrow=c(1,2)) # Configuramos e número de elementos por Figura
hist(data_diabetes$imc)
hist(data_diabetes$insulina)
```

# \[resumen\] Por otra variable

Frecuentemente es importante realizar el resumen de datos por otra variable. Por ejemplo, la media de edad según estado de diabetes o el número de individuos por grupo de edad. En R, podemos calcular esto usando la función `group_by()` y `summarize()`

```{r}
data_diabetes |> 
  group_by(grupo_edad) |> 
  summarise(n_observ = n(),
            porcentaje = (n_observ / nrow(data_diabetes)*100))
```

```{r}
data_diabetes |>  
  group_by(Diabetes) |> 
  summarize(promedio = mean(Glucosa, na.rm = T))
```

Podemos hacer resumenes incluso más complejos. Por ejemplo, calcular la media de glucosa por estado de `diabetes` y categoría de `grupo_edad`. Para esto, añade la variable edad_cat a la función `group_by()`

```{r}
data_diabetes |>  
  group_by(Diabetes, grupo_edad) |> 
  summarize(promedio = mean(Glucosa, na.rm = T))
```

Otros estadísticos

```{r}
data_diabetes |>  
  group_by(Diabetes, grupo_edad) |> 
  summarize(promedio_glucosa = mean(Glucosa, na.rm = TRUE),
            DE = sd(Glucosa, na.rm = TRUE),
            max_valor_glucosa = max(Glucosa, na.rm = TRUE))
```

Estadística descriptiva condicional: resumen por grupo de estado de diabetes

```{r}
data_diabetes |>  
  group_by(grupo_edad) |> 
  summarize(max_imc_diab = max(imc[Diabetes == "Si"], na.rm = TRUE),
            max_imc_no_diab = max(imc[Diabetes == "No"], na.rm = TRUE),
            prom_imc_diab = mean(imc[Diabetes == "Si"], na.rm = TRUE),
            prom_imc_no_diab = mean(imc[Diabetes == "No"], na.rm = TRUE))
```

Percentiles del nivel de glucosa por grupo de edad solo en participantes con diabetes usando la función `filter()`

```{r}
data_diabetes |> 
  filter(Diabetes == "Si") |> 
  group_by(grupo_edad) |> 
  summarize(p25 = quantile(Glucosa, probs = 0.25, na.rm=T),
            p50 = quantile(Glucosa, probs = 0.50, na.rm=T),
            p75 = quantile(Glucosa, probs = 0.75, na.rm=T))
```

Usando `across()` para multiples estadísticos descriptivos para multiples variables

```{r}
data_diabetes |> 
  group_by(Diabetes) |> 
  summarize(across(.cols = c(Glucosa, grosor_pliegue_cut_triceps, 
                             insulina, Edad, imc),
                   .fns = list("promedio" = mean, "DE" = sd, 
                               "máximo" = max),
                   na.rm = TRUE))
```

```{r}
data_diabetes |> 
  group_by(Diabetes) |> 
  summarize(across(.cols = where(is.numeric),
                   .fns = list("promedio" = mean, "DE" = sd, 
                               "máximo" = max),
                   na.rm = TRUE))
```

# La "Tabla 1" con gtsummary

```{r}
#install.packages("finalfit")
#install.packages("gtsummary")
```

```{r}
library(gtsummary)
```

Tabla 1 básico

```{r}
data_diabetes |> 
  select(Edad, grupo_edad, imc, Embarazos, Glucosa, 
         insulina, grosor_pliegue_cut_triceps, Diabetes) |> 
  tbl_summary()
```

```{r}
data_diabetes |> 
  select(Edad, grupo_edad, imc, Embarazos, Glucosa, 
         insulina, grosor_pliegue_cut_triceps, Diabetes) |> 
  tbl_summary(
    by = Diabetes
  )
```

Pero las tablas deben ser autoexplicativas...

## Configurando el estilo e idioma

```{r}
theme_gtsummary_language(language = "es") # idioma es = español
theme_gtsummary_journal(journal = "jama")
```

```{r}
data_diabetes |> 
  select(Edad, grupo_edad, imc, Embarazos, Glucosa, 
         insulina, grosor_pliegue_cut_triceps, Diabetes) |> 
  tbl_summary(
    by = Diabetes
  )
```

## Recodificación de variables y adición de nombres correctos a variables

```{r}
data_diabetes_0 = data_diabetes |>
  mutate(
    Edad = ff_label(Edad, "Edad (años)"),
    
    grupo_edad = as.factor(grupo_edad) |>
      fct_relevel("≤25", "26-35", "36-50", ">50") |> 
      ff_label("Grupo etario"),
    
    imc = ff_label(imc, "Índice de masa corporal"),
    
    Embarazos = ff_label(Embarazos,"Número de embarazos"),
    
    Diabetes = as.factor(Diabetes) |>
      fct_recode("Sí" = "Si",
                 "No" = "No") |>
      fct_relevel("Sí", "No") |> 
      ff_label("Diabetes mellitus"),
    
    insulina_cat = as_factor(insulina_cat) |> 
      fct_relevel("Baja (<30)", "Normal (30-150)", "Alta (>150)") |>
      ff_label("Niveles de insulina (mIU/L)"),
    
    Glucosa = ff_label(Glucosa, "Glucosa (mg/dL)")
    )
```

```{r}
tabla_1.v1 = data_diabetes_0 |> 
  select(Edad, grupo_edad, imc, Embarazos, insulina_cat, Diabetes, Glucosa) |> 
  tbl_summary(by = Diabetes) 
```

Añadiendo nombre a la variable dependiente

```{r}
tabla_1.v2 = data_diabetes_0 |> 
  select(Edad, grupo_edad, imc, Embarazos, insulina_cat, Diabetes, Glucosa) |> 
  tbl_summary(by = Diabetes) |> 
  modify_spanning_header(all_stat_cols() ~ "**Diabetes mellitus**") |>
  add_overall() 
```

```{r}
tabla_1 = data_diabetes_0 |> 
  select(Edad, grupo_edad, imc, Embarazos, insulina_cat, Diabetes, Glucosa) |> 
  tbl_summary(by = Diabetes) |> 
  modify_spanning_header(all_stat_cols() ~ "**Diabetes mellitus**") |>
  add_overall() |> 
  modify_caption("**Tabla 1**. Características de los pacientes del departamento de medicina interna del Hospital Regional de Ica")
```

```{r}
install.packages("flextable")
library(flextable)
```

```{r}
tabla_1_flex = as_flex_table(tabla_1) # Convertir a flex table
save_as_docx(tabla_1_flex, path = "tabla_1_flex.docx") # Guardar tabla
```
