prom_imc_diab = mean(imc[Diabetes == "Si"], na.rm = TRUE),
prom_imc_no_diab = mean(imc[Diabetes == "No"], na.rm = TRUE))
data_diabetes |>
filter(Diabetes == "Si") |>
group_by(grupo_edad) |>
summarize(p25 = quantile(Glucosa, probs = 0.25, na.rm=T),
p50 = quantile(Glucosa, probs = 0.50, na.rm=T),
p75 = quantile(Glucosa, probs = 0.75, na.rm=T))
data_diabetes |>
group_by(Diabetes) |>
summarize(across(.cols = c(Glucosa, grosor_pliegue_cut_triceps,
insulina, Edad, imc),
.fns = list("promedio" = mean, "DE" = sd,
"máximo" = max),
na.rm = TRUE))
data_diabetes |>
group_by(Diabetes) |>
summarize(across(.cols = where(is.numeric),
.fns = list("promedio" = mean, "DE" = sd,
"máximo" = max),
na.rm = TRUE))
#install.packages("finalfit")
#install.packages("gtsummary")
library(gtsummary)
data_diabetes |>
select(Edad, grupo_edad, imc, Embarazos, Glucosa,
insulina, grosor_pliegue_cut_triceps, Diabetes) |>
tbl_summary()
data_diabetes |>
select(Edad, grupo_edad, imc, Embarazos, Glucosa,
insulina, grosor_pliegue_cut_triceps, Diabetes) |>
tbl_summary(
by = Diabetes
)
theme_gtsummary_language(language = "es") # idioma es = español
theme_gtsummary_journal(journal = "jama")
data_diabetes |>
select(Edad, grupo_edad, imc, Embarazos, Glucosa,
insulina, grosor_pliegue_cut_triceps, Diabetes) |>
tbl_summary(
by = Diabetes
)
data_diabetes_0 = data_diabetes |>
mutate(
Edad = ff_label(Edad, "Edad (años)"),
grupo_edad = as.factor(grupo_edad) |>
fct_relevel("≤25", "26-35", "36-50", ">50") |>
ff_label("Grupo etario"),
imc = ff_label(imc, "Índice de masa corporal"),
Embarazos = ff_label(Embarazos,"Número de embarazos"),
Diabetes = as.factor(Diabetes) |>
fct_recode("Sí" = "Si",
"No" = "No") |>
fct_relevel("Sí", "No") |>
ff_label("Diabetes mellitus"),
insulina_cat = as_factor(insulina_cat) |>
fct_relevel("Baja (<30)", "Normal (30-150)", "Alta (>150)") |>
ff_label("Niveles de insulina (mIU/L)"),
Glucosa = ff_label(Glucosa, "Glucosa (mg/dL)")
)
tabla_1.v1 = data_diabetes_0 |>
select(Edad, grupo_edad, imc, Embarazos, insulina_cat, Diabetes, Glucosa) |>
tbl_summary(by = Diabetes)
tabla_1.v2 = data_diabetes_0 |>
select(Edad, grupo_edad, imc, Embarazos, insulina_cat, Diabetes, Glucosa) |>
tbl_summary(by = Diabetes) |>
modify_spanning_header(all_stat_cols() ~ "**Diabetes mellitus**") |>
add_overall()
tabla_1 = data_diabetes_0 |>
select(Edad, grupo_edad, imc, Embarazos, insulina_cat, Diabetes, Glucosa) |>
tbl_summary(by = Diabetes) |>
modify_spanning_header(all_stat_cols() ~ "**Diabetes mellitus**") |>
add_overall() |>
modify_caption("**Tabla 1**. Características de los pacientes del departamento de medicina interna del Hospital Regional de Ica")
install.packages("flextable")
library(flextable)
tabla_1_flex = as_flex_table(tabla_1) # Convertir a flex table
save_as_docx(tabla_1_flex, path = "tabla_1_flex.docx") # Guardar tabla
install.packages("rio")
install.packages("gtsummary")
install.packages("finalfit")
install.packages("flextable")
library(tidyverse)
library(here)
library(rio)
library(gtsummary) ## Para la "Tabla 1"
library(finalfit)
library(flextable)
data_diabetes <- import(here("data", "dengue.csv"))
data_diabetes <- import(here("data", "dengue.csv"))
data_diabetes <- import(here("data", "dengue.csv"))
data_diabetes <- import(here("data", "dengue.csv"))
library(tidyverse)
library(here)
library(rio)
library(gtsummary) ## Para la "Tabla 1"
library(finalfit)
library(flextable)
library(tidyverse)
library(here)
library(rio)
library(gtsummary) ## Para la "Tabla 1"
library(finalfit)
library(flextable)
data_diabetes <- import(here("data", "s04_diabetes.csv"))
str(data_diabetes)
table(data_diabetes$Diabetes, useNA = "ifany")
table(data_diabetes$insulina_cat, useNA = "ifany")
data_diabetes |>
dplyr::count(insulina_cat, sort = TRUE)
prop.table(table(data_diabetes$insulina_cat, useNA = "ifany"))
mean(data_diabetes$imc, na.rm = TRUE)
sd(data_diabetes$imc, na.rm = TRUE)
min(data_diabetes$imc, na.rm = TRUE) # Proporciona el valor mínimo
IQR(data_diabetes$imc, na.rm = TRUE) # Calcula el rango intercuartilico
median(data_diabetes$imc, na.rm = TRUE) # Calcula la mediana
summary(data_diabetes$Glucosa)
mean(data_diabetes$imc, na.rm = T)
data_diabetes <- import(here("data", "dengue.csv"))
data_diabetes <- import(here("data", "dengue.csv"))
str(data_diabetes)
str(data_dengue)
data_dengue <- import(here("data", "dengue.csv"))
str(data_dengue)
table(data_dengue$Dengue, useNA = "ifany")
table(data_dengue$Diabetes, useNA = "ifany")
table(data_dengue$Diabetes, useNA = "ifany")
table(data_diabetes$Diabetes, useNA = "ifany")
str(data_dengue)
table(data_diabetes$Diabetes, useNA = "ifany")
table(data_dengue$Resultado, useNA = "ifany")
table(data_dengue$insulina_cat, useNA = "ifany")
table(data_dengue$IgM, useNA = "ifany")
table(data_dengue$IgM, useNA = "ifany")
data_dengue |>
dplyr::count(IgM, sort = TRUE)
data_dengue |>
dplyr::count(insulina_cat, sort = TRUE)
data_dengue |>
dplyr::count(IgM, sort = TRUE)
prop.table(table(data_dengue$IgM, useNA = "ifany"))
prop.table(table(data_dengue$Tipo_Vivienda, useNA = "ifany"))
data_dengue |>
dplyr::count(Tipo_Vivienda, sort = TRUE)
table(data_dengue$Tipo_Vivienda, useNA = "ifany")
table(data_dengue$Distrito, useNA = "ifany")
table(data_dengue$Tipo_Zona, useNA = "ifany")
mean(data_dengue$imc, na.rm = TRUE)
mean(data_diabetes$IgG, na.rm = TRUE)
mean(data_diabetes$Edad, na.rm = TRUE)
sd(data_diabetes$Edad, na.rm = TRUE)
sd(data_diabetes$Edad, na.rm = TRUE)
min(data_dengue$Edad, na.rm = TRUE) # Proporciona el valor mínimo
IQR(data_dengue$Edad, na.rm = TRUE) # Calcula el rango intercuartilico
median(data_dengue$Edad, na.rm = TRUE) # Calcula la mediana
min(data_dengue$Edad, na.rm = TRUE) # Proporciona el valor mínimo
IQR(data_dengue$Edad, na.rm = TRUE) # Calcula el rango intercuartilico
median(data_dengue$Edad, na.rm = TRUE) # Calcula la mediana
summary(data_ddengue$Edad)
summary(data_dengue$Edad)
mean(data_dengue$Edad, na.rm = T)
median(data_dengue$Edad, na.rm = T)
par(mfrow=c(1,2)) # Configuramos e número de elementos por Figura
hist(data_dengue$Edad)
hist(data_dENGUE$Edad)
par(mfrow=c(1,2)) # Configuramos e número de elementos por Figura
hist(data_dengue$Edad)
hist(data_dengue$Edad)
data_dengue |>
group_by(Edad) |>
summarise(n_observ = n(),
porcentaje = (n_observ / nrow(data_dengue)*100))
data_dengue |>
group_by(Edad) |>
summarize(promedio = mean(edad, na.rm = T))
data_dengue |>
group_by(Edad) |>
summarize(promedio = mean(Edad, na.rm = T))
data_dengue |>
group_by(Tipo_Zona) |>
summarize(promedio = mean(Tipo_Zona, na.rm = T))
data_dengue |>
group_by(Edad) |>
summarize(promedio = mean(Edad, na.rm = T))
data_dengue |>
group_by(dengue) |>
summarize(across(.cols = where(is.numeric),
.fns = list("promedio" = mean, "DE" = sd,
"máximo" = max),
na.rm = TRUE))
data_dengue |>
group_by(Edad) |>
summarize(across(.cols = where(is.numeric),
.fns = list("promedio" = mean, "DE" = sd,
"máximo" = max),
na.rm = TRUE))
data_dengue |>
group_by(Distrito) |>
summarize(across(.cols = where(is.numeric),
.fns = list("promedio" = mean, "DE" = sd,
"máximo" = max),
na.rm = TRUE))
data_dengue |>
group_by(Tipo_Vivienda) |>
summarize(across(.cols = c(Edad, grosor_pliegue_cut_triceps,
insulina, Edad, imc),
.fns = list("promedio" = mean, "DE" = sd,
"máximo" = max),
na.rm = TRUE))
#install.packages("finalfit")
#install.packages("gtsummary")
library(gtsummary)
data_dengue |>
select(Edad, grupo_edad, imc, Embarazos, Glucosa,
insulina, grosor_pliegue_cut_triceps, Diabetes) |>
tbl_summary()
data_dengue |>
select(Genero, Edad, NS1) |>
tbl_summary()
data_dengue |>
select(Genero, Edad, NS1, IgG, IgM, Zona, Tipo_Zona) |>
tbl_summary()
data_dengue |>
select(Genero, Edad, NS1, IgG, IgM, Zona, Tipo_Zona, Tipo_Vivienda, Distrito, Resultado) |>
tbl_summary()
data_dengue |>
select(Genero, Edad, NS1, IgG, IgM, Zona, Tipo_Zona, Tipo_Vivienda, Distrito, Resultado) |>
tbl_summary(
by = Edad
)
data_dengue |>
select(Genero, Edad, NS1, IgG, IgM, Zona, Tipo_Zona, Tipo_Vivienda, Distrito, Resultado) |>
tbl_summary(
by = Edad
)
data_dengue |>
select(Genero, Edad, NS1, IgG, IgM, Zona, Tipo_Zona, Tipo_Vivienda, Distrito, Resultado) |>
tbl_summary(
by = Genero
)
theme_gtsummary_language(language = "es") # idioma es = español
theme_gtsummary_journal(journal = "jama")
data_dengue |>
select(Genero, Edad, NS1, IgG, IgM, Zona, Tipo_Zona, Tipo_Vivienda, Distrito, Resultado) |>
tbl_summary(
by = Genero
)
data_dengue_0 = data_dengue |>
mutate(
Edad = ff_label(Edad, "Edad (años)"),
grupo_edad = as.factor(grupo_edad) |>
fct_relevel("≤25", "26-35", "36-50", ">50") |>
ff_label("Grupo etario"),
NS1 = ff_label(NS1, "NS1 test de antigeno"),
IgM = ff_label(IgM,"Inmunoglobulina M"),
Genero = as.factor(Genero) |>
fct_recode("Femenino" = "Femenino",
"Masculino" = "Masculino") |>
fct_relevel("Femenino", "Masculino") |>
ff_label("Genero"),
Tipo_Zona = as_factor(Tipo_Zona) |>
fct_relevel("Desarrollada", "No Desarrollada") |>
ff_label("Tipo de Zona"),
Resultado = ff_label(Resultado, "Resultado de dengue")
)
data_dengue_0 = data_dengue |>
mutate(
Edad = ff_label(Edad, "Edad (años)"),
Edad = as.factor(Edad) |>
fct_relevel("≤25", "26-35", "36-50", ">50") |>
ff_label("Grupo etario"),
NS1 = ff_label(NS1, "NS1 test de antigeno"),
IgM = ff_label(IgM,"Inmunoglobulina M"),
Genero = as.factor(Genero) |>
fct_recode("Femenino" = "Femenino",
"Masculino" = "Masculino") |>
fct_relevel("Femenino", "Masculino") |>
ff_label("Genero"),
Tipo_Zona = as_factor(Tipo_Zona) |>
fct_relevel("Desarrollada", "No Desarrollada") |>
ff_label("Tipo de Zona"),
Resultado = ff_label(Resultado, "Resultado de dengue")
)
tabla_1.v1 = data_dengue_0 |>
select(Edad, NS1, IgM, Genero, Tipo_Zona, Resultado) |>
tbl_summary(by = Resultado)
tabla_1.v2 = data_dengue_0 |>
select(Edad, NS1, IgM, Genero, Tipo_Zona, Resultado) |>
tbl_summary(by = Resultado) |>
modify_spanning_header(all_stat_cols() ~ "**Dengue**") |>
add_overall()
tabla_1 = data_dengue_0 |>
select(Edad, NS1, IgM, Genero, Tipo_Zona, Resultado) |>
tbl_summary(by = Resultado) |>
modify_spanning_header(all_stat_cols() ~ "**Dengue**") |>
add_overall() |>
modify_caption("**Tabla 1**. Características de los pacientes con Dengue")
install.packages("flextable")
library(flextable)
tabla_1_flex = as_flex_table(tabla_1) # Convertir a flex table
save_as_docx(tabla_1_flex, path = "tabla_1_flex.docx") # Guardar tabla
library(tidyverse)
library(here)
library(rio)
library(gtsummary)
library(car)
install.packages("car") # Para la prueba de Levene
install.packages("car") # Para la prueba de Levene
library(tidyverse)
library(here)
library(rio)
library(gtsummary)
library(car)
install.packages("car")
install.packages("here")
install.packages("rio")
install.packages("gtsummary")# Para la prueba de Levene
library(tidyverse)
library(here)
library(rio)
library(gtsummary)
library(car)
dengue_data |>
filter(sexo == "Masculino") |>
summarise(shapiro = list(shapiro.test(Hematocrito))) |>
pull(shapiro)
dengue_data |>
filter(sexo == "Masculino") |>
summarise(shapiro = list(shapiro.test(Hematocrito))) |>
pull(shapiro)
install.packages("performance")
library(tidyverse)
library(here)
library(rio)
library(gtsummary)
library(car)
library(survival)
library(performance)
Dengue_csv <- import(here("data", "s12_dengue.csv"))
Dengue_csv <- import(here("data", "s12_dengue.csv"))
head(dengue_csv)
dengue_csv <- import(here("data", "s12_dengue.csv"))
dengue_csv <- import(here("data", "s12_dengue.csv"))
head(dengue_csv)
dengue_1 <- dengue |>
mutate(
NS1 = relevel(as.factor(NS1), ref = "Negativo"),
IgG = relevel(as.factor(IgG), ref = "Negativo"),
IgM = relevel(as.factor(IgM), ref = "Negativo"),
Genero = relevel(as.factor(Genero), ref = "Femenino"),
Resultado = relevel(as.factor(Resultado), ref = "Dengue negativo")
) |>
na.omit()
dengue_1 <- dengue_csv |>
mutate(
NS1 = relevel(as.factor(NS1), ref = "Negativo"),
IgG = relevel(as.factor(IgG), ref = "Negativo"),
IgM = relevel(as.factor(IgM), ref = "Negativo"),
Genero = relevel(as.factor(Genero), ref = "Femenino"),
Resultado = relevel(as.factor(Resultado), ref = "Dengue negativo")
) |>
na.omit()
tabla_reg_log_univ_dengue <- dengue_1 |>
tbl_uvregression(
include = c(Edad, Genero, NS1, IgG, IgM),
y = Resultado,
method = glm,
method.args = list(family = binomial),
exponentiate = TRUE,
conf.int = TRUE,
hide_n = TRUE,
add_estimate_to_reference_rows = FALSE,
pvalue_fun = ~ style_pvalue(.x, digits = 3),
estimate_fun = ~ style_number(.x, digits = 2),
label = list(
Edad ~ "Edad (años)",
Genero ~ "Género",
NS1 ~ "NS1",
IgG ~ "IgG",
IgM ~ "IgM"
)
) |>
bold_labels() |>
bold_p(t = 0.05) |>
modify_header(estimate = "**OR no ajustado**", p.value = "**Valor P**")
tabla_univ <- dengue_csv |>
tbl_uvregression(
include = c(Edad, Genero,  NS1, IgG, IgM),
y = Resultado,
method = glm,
method.args = list(family = binomial),
exponentiate = TRUE,
conf.int = TRUE,
hide_n = TRUE,
add_estimate_to_reference_rows = FALSE,
pvalue_fun = ~ style_pvalue(.x, digits = 3),
estimate_fun = ~ style_number(.x, digits = 2),
label = list(
Edad ~ "Edad (años)",
Genero ~ "Sexo",
NS1    ~ "Antígeno NS1 (Dengue)",
IgG    ~ "Inmunoglobulina G (IgG)",
IgM    ~ "Inmunoglobulina M (IgM)"
)
) |>
bold_labels() |>
bold_p(t = 0.05) |>
modify_header(estimate = "**OR**", p.value = "**Valor P**")
install.packages("broom.helpers")
library(tidyverse)
library(here)
library(rio)
library(gtsummary)
library(car)
library(survival)
library(performance)
library(broom.helpers)
tabla_univ <- dengue_csv |>
tbl_uvregression(
include = c(Edad, Genero,  NS1, IgG, IgM),
y = Resultado,
method = glm,
method.args = list(family = binomial),
exponentiate = TRUE,
conf.int = TRUE,
hide_n = TRUE,
add_estimate_to_reference_rows = FALSE,
pvalue_fun = ~ style_pvalue(.x, digits = 3),
estimate_fun = ~ style_number(.x, digits = 2),
label = list(
Edad ~ "Edad (años)",
Genero ~ "Sexo",
NS1    ~ "Antígeno NS1 (Dengue)",
IgG    ~ "Inmunoglobulina G (IgG)",
IgM    ~ "Inmunoglobulina M (IgM)"
)
) |>
bold_labels() |>
bold_p(t = 0.05) |>
modify_header(estimate = "**OR**", p.value = "**Valor P**")
dengue_1 <- dengue_csv1
dengue_1 <- dengue_csv
|>
dengue_1 <- dengue_csv1|>
mutate(
NS1 = relevel(as.factor(NS1), ref = "Negativo"),
IgG = relevel(as.factor(IgG), ref = "Negativo"),
IgM = relevel(as.factor(IgM), ref = "Negativo"),
Genero = relevel(as.factor(Genero), ref = "Femenino"),
Resultado = relevel(as.factor(Resultado), ref = "Dengue negativo")
) |>
na.omit()
dengue_1 <- dengue_csv|>
mutate(
NS1 = relevel(as.factor(NS1), ref = "Negativo"),
IgG = relevel(as.factor(IgG), ref = "Negativo"),
IgM = relevel(as.factor(IgM), ref = "Negativo"),
Genero = relevel(as.factor(Genero), ref = "Femenino"),
Resultado = relevel(as.factor(Resultado), ref = "Dengue negativo")
) |>
na.omit()
tabla_reg_log_univ_dengue <- dengue_1 |>
tbl_uvregression(
include = c(Edad, Genero, NS1, IgG, IgM),
y = Resultado,
method = glm,
method.args = list(family = binomial),
exponentiate = TRUE,
conf.int = TRUE,
hide_n = TRUE,
add_estimate_to_reference_rows = FALSE,
pvalue_fun = ~ style_pvalue(.x, digits = 3),
estimate_fun = ~ style_number(.x, digits = 2),
label = list(
Edad ~ "Edad (años)",
Genero ~ "Género",
NS1 ~ "NS1",
IgG ~ "IgG",
IgM ~ "IgM"
)
) |>
bold_labels() |>
bold_p(t = 0.05) |>
modify_header(estimate = "**OR no ajustado**", p.value = "**Valor P**")
install.packages("mice")
install.packages("ggmice")
library(mice)
library(tidyverse)
library(here)
library(rio)
library(ggmice)
library(gtsummary)
dengue_data <- import(here("data", "dengue.csv"))
head(dengue_data)
colSums(is.na(dengue_data))
dengue_data  |>
select(
Genero,
Edad,
NS1,
IgG,
IgM,
Zona,
Tipo_Zona,
Tipo_Vivienda,
Distrito,
Resultado
) |>
ggmice::plot_pattern(
square = TRUE,
rotate = TRUE
)
